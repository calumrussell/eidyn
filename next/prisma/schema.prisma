generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model avg_rating_change_by_eco {
  avg_white_elo_change Float?
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           String  @unique(map: "d1f266b9b7c2bc83d7bbe7b9f81ec80a") @db.Char
  name                 String?
}

model avg_rating_change_by_eco_black_rating_range {
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           String  @db.Char
  black_rating_range   Int
  eco                  String?
  name                 String?
  moves                String?

  @@unique([opening_id, black_rating_range], map: "1739d68132039923833ccd0bb1759e9f")
}

model avg_rating_change_by_eco_white_rating_range {
  avg_white_elo_change Float?
  game_count           Int?
  opening_id           String  @db.Char
  white_rating_range   Int
  eco                  String?
  name                 String?
  moves                String?

  @@unique([opening_id, white_rating_range], map: "84322457b05c5c65d83b94323fa35500")
}

model avg_rating_change_by_lichess {
  avg_white_elo_change Float?
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           Int     @unique(map: "e771b150ca79470680a810a5bc7e390c") @db.SmallInt
  name                 String?
}

model avg_rating_change_by_lichess_black_rating_range {
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           Int     @db.SmallInt
  name                 String?
  black_rating_range   Int

  @@unique([opening_id, black_rating_range], map: "ba0a10cbb249cbb4256a08ce6b6c1111")
}

model avg_rating_change_by_lichess_white_rating_range {
  avg_white_elo_change Float?
  game_count           Int?
  opening_id           Int     @db.SmallInt
  name                 String?
  white_rating_range   Int

  @@unique([opening_id, white_rating_range], map: "f922df423e02e07a466490cad6cf863c")
}

model eco_codes {
  eco  String  @unique(map: "074a557fe3e971b02b44f2cec85101d2") @db.Char
  name String?
}

model eco_names {
  eco   String  @id
  name  String?
  moves String?
}

model ending {
  id                             Int       @id @default(autoincrement()) @db.SmallInt
  name                           String?   @unique(map: "ending_name")
  matches_matches_endingToending matches[] @relation("matches_endingToending")
}

model event {
  id                           Int       @id @default(autoincrement()) @db.SmallInt
  name                         String?   @unique(map: "event_name")
  matches_matches_eventToevent matches[] @relation("matches_eventToevent")
}

model matches {
  black_elo                     Int?     @db.SmallInt
  white_elo                     Int?     @db.SmallInt
  opening                       Int      @default(autoincrement()) @db.SmallInt
  time                          Int      @default(autoincrement()) @db.SmallInt
  ending                        Int      @default(autoincrement()) @db.SmallInt
  date                          Int?
  event                         Int      @default(autoincrement()) @db.SmallInt
  eco                           String?  @db.Char(3)
  last_move                     Int?     @db.SmallInt
  res                           String?  @db.Bit(2)
  hash                          String   @id
  ending_matches_endingToending ending   @relation("matches_endingToending", fields: [ending], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ending")
  event_matches_eventToevent    event    @relation("matches_eventToevent", fields: [event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event")
  openings                      openings @relation(fields: [opening], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_openings")
  time_matches_timeTotime       time     @relation("matches_timeTotime", fields: [time], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_time")
}

model openings {
  id      Int       @id @default(autoincrement()) @db.SmallInt
  name    String?   @unique(map: "openings_name")
  matches matches[]
}

model rating_change {
  white_elo_change Float?
  black_elo_change Float?
  hash             String @unique(map: "2c1dba202a9e4b4378aba703e1d1c1ba")
}

model rating_range {
  black_rating_range Int?
  white_rating_range Int?
  hash               String @unique(map: "34e20b3d474bbf34ae0e3ba5aea3ede5")
}

model time {
  id                         Int       @id @default(autoincrement()) @db.SmallInt
  name                       String?   @unique(map: "time_name")
  matches_matches_timeTotime matches[] @relation("matches_timeTotime")
}

model top_eco_by_black_rating_range {
  avg_black_elo_change Float?
  opening_id           String  @db.Char
  black_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([opening_id, black_rating_range], map: "b5d950602a83ad4ba3c2434fee4c2838")
}

model top_eco_by_white_rating_range {
  avg_white_elo_change Float?
  opening_id           String  @db.Char
  white_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([opening_id, white_rating_range], map: "ac1dc7c9d092b3c7a4757592b414875a")
}

model top_lichess_by_black_rating_range {
  avg_black_elo_change Float?
  opening_id           Int     @db.SmallInt
  black_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([opening_id, black_rating_range], map: "c874c2675c88d79afd31fcba9dfb3ff2")
}

model top_lichess_by_white_rating_range {
  avg_white_elo_change Float?
  opening_id           Int     @db.SmallInt
  white_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([opening_id, white_rating_range], map: "4bd18784872214435fee6ac00cab3d69")
}

model win_probs {
  white_exp Float?
  black_exp Float?
  res       String? @db.Bit(2)
  hash      String  @unique(map: "58a3f1c054d7ce9ad43ff623c0d61315")
}
