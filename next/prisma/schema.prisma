generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model avg_rating_change_by_eco {
  avg_white_elo_change Float?
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           String  @unique(map: "be04e8a1d67fd948b9ff627e3b383087") @db.Char
  name                 String?
}

model avg_rating_change_by_eco_black_rating_range {
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           String  @db.Char
  black_rating_range   Int
  eco                  String?
  name                 String?
  moves                String?

  @@unique([opening_id, black_rating_range], map: "50f1c218c18c68a9b42528fd5cc2e5f1")
}

model avg_rating_change_by_eco_white_rating_range {
  avg_white_elo_change Float?
  game_count           Int?
  opening_id           String  @db.Char
  white_rating_range   Int
  eco                  String?
  name                 String?
  moves                String?

  @@unique([opening_id, white_rating_range], map: "1324c94f6f597ebe08af83d2d284b286")
}

model avg_rating_change_by_lichess {
  avg_white_elo_change Float?
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           Int     @unique(map: "8fad4cb27f9898221a1559abb6d85a0c") @db.SmallInt
  name                 String?
}

model avg_rating_change_by_lichess_black_rating_range {
  avg_black_elo_change Float?
  game_count           Int?
  opening_id           Int     @db.SmallInt
  name                 String?
  black_rating_range   Int

  @@unique([opening_id, black_rating_range], map: "a6552f6a2bcbd96fc1d6a666bc16ef99")
}

model avg_rating_change_by_lichess_white_rating_range {
  avg_white_elo_change Float?
  game_count           Int?
  opening_id           Int     @db.SmallInt
  name                 String?
  white_rating_range   Int

  @@unique([opening_id, white_rating_range], map: "c08fbca6a7995ae02f05ee2bcd0e4768")
}

model eco_codes {
  eco  String  @unique(map: "c8cc2f8a64423abfcc89f30a8ff0ff05") @db.Char
  name String?
}

model eco_names {
  eco   String  @id
  name  String?
  moves String?
}

model ending {
  id                             Int       @id @default(autoincrement()) @db.SmallInt
  name                           String?   @unique(map: "ending_name")
  matches_matches_endingToending matches[] @relation("matches_endingToending")
}

model event {
  id                           Int       @id @default(autoincrement()) @db.SmallInt
  name                         String?   @unique(map: "event_name")
  matches_matches_eventToevent matches[] @relation("matches_eventToevent")
}

model matches {
  black_elo                     Int?     @db.SmallInt
  white_elo                     Int?     @db.SmallInt
  opening                       Int      @default(autoincrement()) @db.SmallInt
  time                          Int      @default(autoincrement()) @db.SmallInt
  ending                        Int      @default(autoincrement()) @db.SmallInt
  date                          Int?
  event                         Int      @default(autoincrement()) @db.SmallInt
  eco                           String?  @db.Char(3)
  last_move                     Int?     @db.SmallInt
  res                           String?  @db.Bit(2)
  hash                          String   @id
  ending_matches_endingToending ending   @relation("matches_endingToending", fields: [ending], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ending")
  event_matches_eventToevent    event    @relation("matches_eventToevent", fields: [event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event")
  openings                      openings @relation(fields: [opening], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_openings")
  time_matches_timeTotime       time     @relation("matches_timeTotime", fields: [time], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_time")
}

model openings {
  id      Int       @id @default(autoincrement()) @db.SmallInt
  name    String?   @unique(map: "openings_name")
  matches matches[]
}

model rating_change {
  white_elo_change Float?
  black_elo_change Float?
  hash             String @unique(map: "f77a8a8e98bc1083c149eb89efb31205")
}

model rating_range {
  black_rating_range Int?
  white_rating_range Int?
  hash               String @unique(map: "f7bf06a6c61319161911e4533f2e835c")
}

model time {
  id                         Int       @id @default(autoincrement()) @db.SmallInt
  name                       String?   @unique(map: "time_name")
  matches_matches_timeTotime matches[] @relation("matches_timeTotime")
}

model top_eco_by_black_rating_range {
  avg_black_elo_change Float?
  opening_id           String  @db.Char
  black_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 Int?

  @@unique([opening_id, black_rating_range], map: "e901d118f76ae986acfbcad54b067344")
}

model top_eco_by_white_rating_range {
  avg_white_elo_change Float?
  opening_id           String  @db.Char
  white_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 Int?

  @@unique([opening_id, white_rating_range], map: "34ba84ca2cba3dea8d1c4564e26dcd27")
}

model top_lichess_by_black_rating_range {
  avg_black_elo_change Float?
  opening_id           Int     @db.SmallInt
  black_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 Int?

  @@unique([opening_id, black_rating_range], map: "dca8f86eceb67129ebff049651a558e7")
}

model top_lichess_by_white_rating_range {
  avg_white_elo_change Float?
  opening_id           Int     @db.SmallInt
  white_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 Int?

  @@unique([opening_id, white_rating_range], map: "5b302de310ade84f80efcc05eecd7e47")
}

model win_probs {
  white_exp Float?
  black_exp Float?
  res       String? @db.Bit(2)
  hash      String  @unique(map: "571dc22c8bdc234ea7ad6a67ad731a13")
}
