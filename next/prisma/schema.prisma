generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model avg_rating_change_by_eco {
  avg_white_elo_change Float?
  avg_black_elo_change Float?
  game_count           Int?
  eco                  String @unique(map: "4945531768bef70365351df6e3fd3fc8") @db.Char(3)
}

model avg_rating_change_by_eco_black_rating_range {
  eco                  String  @db.Char
  avg_black_elo_change Float?
  game_count           Int?
  black_rating_range   Int
  name                 String?
  moves                String?

  @@unique([eco, black_rating_range], map: "c8fb5bc323c56c42f85db308f3f5de42")
}

model avg_rating_change_by_eco_white_rating_range {
  eco                  String  @db.Char
  avg_white_elo_change Float?
  game_count           Int?
  white_rating_range   Int
  name                 String?
  moves                String?

  @@unique([eco, white_rating_range], map: "15c66b2531ec1ed0b14471967b5b7726")
}

model avg_rating_change_by_lichess {
  avg_white_elo_change Float?
  avg_black_elo_change Float?
  game_count           Int?
  opening              Int    @unique(map: "820acb7132820b1015f2335082a0ab75") @db.SmallInt
}

model avg_rating_change_by_lichess_black_rating_range {
  avg_black_elo_change Float?
  game_count           Int?
  opening              Int     @db.SmallInt
  name                 String?
  black_rating_range   Int

  @@unique([opening, black_rating_range], map: "27252c006651b7b274904f49c0be8e9a")
}

model avg_rating_change_by_lichess_white_rating_range {
  avg_white_elo_change Float?
  game_count           Int?
  opening              Int     @db.SmallInt
  name                 String?
  white_rating_range   Int

  @@unique([opening, white_rating_range], map: "92e944a9ca3869f9ad2eb2e6fc4fb31e")
}

model eco_codes {
  eco  String  @unique(map: "b1b15e6a5d114f8e543d7671fe4ff5c0") @db.Char
  name String?
}

model eco_names {
  eco   String  @id
  name  String?
  moves String?
}

model ending {
  id                             Int       @id @default(autoincrement()) @db.SmallInt
  name                           String?   @unique(map: "ending_name")
  matches_matches_endingToending matches[] @relation("matches_endingToending")
}

model event {
  id                           Int       @id @default(autoincrement()) @db.SmallInt
  name                         String?   @unique(map: "event_name")
  matches_matches_eventToevent matches[] @relation("matches_eventToevent")
}

model matches {
  black_elo                     Int?     @db.SmallInt
  white_elo                     Int?     @db.SmallInt
  opening                       Int      @default(autoincrement()) @db.SmallInt
  time                          Int      @default(autoincrement()) @db.SmallInt
  ending                        Int      @default(autoincrement()) @db.SmallInt
  date                          Int?
  event                         Int      @default(autoincrement()) @db.SmallInt
  eco                           String?  @db.Char(3)
  last_move                     Int?     @db.SmallInt
  res                           String?  @db.Bit(2)
  hash                          String   @id
  prob                          Int      @default(autoincrement()) @db.SmallInt
  win                           Boolean?
  ending_matches_endingToending ending   @relation("matches_endingToending", fields: [ending], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ending")
  event_matches_eventToevent    event    @relation("matches_eventToevent", fields: [event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event")
  openings                      openings @relation(fields: [opening], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_openings")
  time_matches_timeTotime       time     @relation("matches_timeTotime", fields: [time], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_time")
}

model openings {
  id      Int       @id @default(autoincrement()) @db.SmallInt
  name    String?   @unique(map: "openings_name")
  matches matches[]
}

model rating_change {
  white_elo_change Float?
  black_elo_change Float?
  hash             String @unique(map: "2a89ec49102f8e2c0ac15e1ce49a7630")
}

model rating_range {
  black_rating_range Int?
  white_rating_range Int?
  hash               String @unique(map: "59010ee0d3af74f901f6797aea923960")
}

model time {
  id                         Int       @id @default(autoincrement()) @db.SmallInt
  name                       String?   @unique(map: "time_name")
  matches_matches_timeTotime matches[] @relation("matches_timeTotime")
}

model top_eco_by_black_rating_range {
  avg_black_elo_change Float?
  eco                  String  @db.Char
  black_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([eco, black_rating_range], map: "d66831b74f08c0e1ae76e227e8043ba9")
}

model top_eco_by_white_rating_range {
  avg_white_elo_change Float?
  eco                  String  @db.Char
  white_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([eco, white_rating_range], map: "ac236ebab6ebfd145ff4578e6392f064")
}

model top_lichess_by_black_rating_range {
  avg_black_elo_change Float?
  opening              Int     @db.SmallInt
  black_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([opening, black_rating_range], map: "2b2609236de17b4eefd9b5a3b86d6ff9")
}

model top_lichess_by_white_rating_range {
  avg_white_elo_change Float?
  opening              Int     @db.SmallInt
  white_rating_range   Int
  game_count           Int?
  name                 String?
  rank                 BigInt?

  @@unique([opening, white_rating_range], map: "7957d71f4dc08835e7ad33885ef4c4d2")
}

model win_probs {
  white_exp Float?
  black_exp Float?
  res       String? @db.Bit(2)
  hash      String  @unique(map: "b15edd35ff71c9af5dbc0c1d711383e0")
}
